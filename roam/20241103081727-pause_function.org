:PROPERTIES:
:ID:       996721c2-1105-4c80-b4a4-d8115f239046
:END:
#+title: pause function
#+date: [2024-11-03 Sun 08:17]
#+startup: overview

The =pause()= function in the =unistd.h= header file is a POSIX function that suspends the calling process until it receives a signal.

The function doesn't take any parameters and its typical usage is in a loop where signals are handled, often used in daemon or signal-handling code.

#+begin_src c
#include <stdio.h>
#include <unistd.h>
#include <signal.h>

void handle_signal(int signal) {
    printf("Received signal %d\n", signal);
    if (signal == SIGTERM) {
        printf("Exiting program.\n");
        exit(0);
    }
}

int main() {
    signal(SIGINT, handle_signal); // Set up signal handler for SIGINT
    printf("Press Ctrl+C to send SIGINT and resume the program.\n");

    // Infinite loop to continually wait for signals
	while (1) {
		pause(); // Wait for signals
	}

    printf("Program resumed after receiving a signal.\n");
    return 0;
}
#+end_src

In this example, =pause()= is used to wait until the program receives a signal, after which the signal handler is executed, and the program continues.

- Use [[id:911a3c63-9913-4e33-8a52-b51d690797aa][ps]] to locate the PID: =ps aux | grep your_program_name=.
- Send a termination signal ([[id:c68e0b56-9a40-499b-a65c-cda0b5708258][SIGTERM]]): =kill -SIGTERM <PID>= or =kill <PID>=.
- If it doesn't terminate, use: =kill -SIGKILL <PID>=.

Now, when the program receives a =SIGTERM= signal, it will exit gracefully. Use =kill -SIGTERM <PID>= to terminate it.
